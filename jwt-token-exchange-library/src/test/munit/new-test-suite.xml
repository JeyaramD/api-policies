<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
	<spring:beans>
		<spring:import resource="classpath:jwt-token-exchange-library.xml" />
	</spring:beans>
	
	<objectstore:config name="ObjectStore__Connector"
		objectStore-ref="api_access_token" doc:name="ObjectStore: Connector"
		entryTtl="${api.objectstore.accessToken.entryTTL}" expirationInterval="${api.objectstore.accessToken.expirationInterval}"
		maxEntries="${api.objectstore.accessToken.maxEntry}" />

	<!-- <set-variable variableName="customPayload" value="#['{&quot;resource&quot;: &quot;http://text-system-api.cloudhub.io&quot;,   &quot;assertion&quot;: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyIsImtpZCI6IkZTaW11RnJGTm9DMHNKWEdtdjEzbk5aY2VEYyJ9.eyJhdWQiOiJodHRwOi8vaHlwZXJ0ZXh0LWFwaS5jbG91ZGh1Yi5pbyIsImlzcyI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0L2I5ODlmMTA0LWQ0MWItNGY0MC1iODE0LTFhM2JmZWU3ZGJjNy8iLCJpYXQiOjE1MjUwODg4NjgsIm5iZiI6MTUyNTA4ODg2OCwiZXhwIjoxNTI1MDkyNzY4LCJhY3IiOiIxIiwiYWlvIjoiWTJkZ1lJaUsrUFBoMXNIMUN6WFBYK2FKV2lQZFlWcTFJcmx2cDJKRGY5N0oxWDFTZXhnQiIsImFtciI6WyJwd2QiXSwiYXBwaWQiOiIzNzM2OTQ3OS1iODdiLTRmMDQtYWEyNy0zZDhmODE3ZGMzMzEiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6IlNBTUxURVNUMSIsImdpdmVuX25hbWUiOiJTQU1MVEVTVDEiLCJpcGFkZHIiOiI1Mi41Ni4xMjQuMTEwIiwibmFtZSI6IlNBTUxURVNUMSIsIm9pZCI6IjU5M2JlZjBiLTY5M2EtNDUzNi1iNWQwLTFjMjRkYTlkYTZjYyIsIm9ucHJlbV9zaWQiOiJTLTEtNS0yMS0xODAxNjc0NTMxLTUxNTk2Nzg5OS04Mzk1MjIxMTUtMTcwNzc3NDYiLCJzY3AiOiJ1c2VyX2ltcGVyc29uYXRpb24iLCJzdWIiOiJ4LUxyRW1oQ0VTYTcwejd0QVVIbkxzLXJ2Tk5kYnpsVEppUnFqT1dDRVVrIiwidGlkIjoiYjk4OWYxMDQtZDQxYi00ZjQwLWI4MTQtMWEzYmZlZTdkYmM3IiwidW5pcXVlX25hbWUiOiJTQU1MVEVTVDFAQlAzNjVURVNULm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6IlNBTUxURVNUMUBCUDM2NVRFU1Qub25taWNyb3NvZnQuY29tIiwidXRpIjoiNEJQTF9tclRuMC12Z2tzMHFKSVpBQSIsInZlciI6IjEuMCJ9.H8b7KcXqOq1N_1dqgeZ1DIgNagNJWjYbsCfDeGMpaYvEVYX4f1vtnVzwvvsEsbOIBdkKgjHTS4-bCAYL2tHO7htJBhLLd_A3G__XocT9blRpZhBQnmUxqzzoyOTswsNByllfEKYFTN5L-3xI_q1SYb_TCs06KamDJa4wPFoh3NbOHLN679wzSuhnrTrg-OWIDJ6t59tSRR4FeV66chb3uNxRmT6Gs9CZvT-asESeZgrK7EeDs4Btx1iLrzuXnqpjaqJiZn22F0VOOXKE3IwUkXrigQTHO0G_QJOMF13g7-h7-3H9LXm6ZvmJFZT-OS22PnGdwBUJLuH3NV2VL3iqig&quot; }']"/> -->

	<munit:test name="jwt-library-get-tokenTest-Token_in_ObjectStore_but_expired_Needs_refreshing"
		description="Test" >
		<mock:when messageProcessor="mule:objectstore:contains" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="retrieve-token-from-ObjectStore"/>
            </mock:with-attributes>
            <mock:then-return payload="#['true']"/>
		</mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock decode-tokenFlow result to make access_token expired and hit refresh-token Flow">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Set Payload with flowVars.tokens.expires_on']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[100]"/>
        </mock:when>
        <parse-template location="src/test/resources/initial_payload.json" doc:name="Parse Template"/>
		<dw:transform-message doc:name="Set FlowVars.payloadBackup as object to use for ObjectStore" metadata:id="2dc1d700-4fb6-435e-8dcc-44b644fcd70d">
            <dw:input-payload doc:sample="resource_assertion.json" mimeType="application/json"/>
            <dw:set-variable variableName="payloadBackup"><![CDATA[%dw 1.0
%output application/java
---
{
	resource: payload.resource,   
	assertion: payload.assertion
}]]></dw:set-variable>
        </dw:transform-message>
	
        <set-variable variableName="payloadBackup " value="#[payload]" doc:name="Set flowVars.payloadBackup as payload to use as input for getToken flow"/>
        <dw:transform-message doc:name="set flowVars.access_token for ObjectStore &amp; payload as json" metadata:id="c01feeb2-1846-411d-bc02-e982c6863194">
            <dw:input-payload doc:sample="resource_assertion.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	resource: flowVars.payloadBackup.resource,
	assertion: flowVars.payloadBackup.assertion
}]]></dw:set-payload>
            <dw:set-variable variableName="access_token"><![CDATA[%dw 1.0
%output application/java
---
payload.assertion]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="token-exchange" doc:name="token-exchange"/>
        <flow-ref name="populateObjectStoreToHitRefreshTokenFlow" doc:name="populateObjectStoreToHitRefreshTokenFlow"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[flowVars.payloadBackup.assertion]" targetProperty="tokens" doc:name="retrieve-from-ObjectStore"/>
        <set-payload value="#[flowVars.payloadBackup]" doc:name="Reset Payload from FlowVars.payloadBackup"/>
		<flow-ref name="jwt-library-get-token" doc:name="jwt-library-get-token" />
		<logger level="INFO" doc:name="Log token" message="'Token result:' + #[payload]"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <munit:assert-not-null message="'Paylod is null but should contain an access token'" doc:name="Assert Not Null Payload"/>
        <munit:assert-true message="#[payload] " condition="#[payload.contains('Bearer')]" doc:name="Assert payload contains Bearer prefix string"/>
        <objectstore:remove config-ref="ObjectStore__Connector" key="#[flowVars.payloadBackup.assertion]" ignoreNotExists="true" doc:name="Remove_to_clean_ObjectStore"/>
	</munit:test>
	
	<munit:test name="jwt-library-get-tokenTest-Retreive_token_from_ObjectStore"
		description="Test" >
		<mock:when messageProcessor="mule:objectstore:contains" doc:name="Mock choice result to fake access-token in cache">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="retrieve-token-from-ObjectStore"/>
            </mock:with-attributes>
            <mock:then-return payload="#['true']"/>
		</mock:when>
		<parse-template location="src/test/resources/initial_payload.json" doc:name="Parse Template"/>
		<dw:transform-message doc:name="Set FlowVars.payloadBackup as object to use for ObjectStore" metadata:id="2dc1d700-4fb6-435e-8dcc-44b644fcd70d">
            <dw:input-payload doc:sample="resource_assertion.json" mimeType="application/json"/>
            <dw:set-variable variableName="payloadBackup"><![CDATA[%dw 1.0
%output application/java
---
{
	resource: payload.resource,   
	assertion: payload.assertion
}]]></dw:set-variable>
        </dw:transform-message>
	
        <set-variable variableName="payloadBackup " value="#[payload]" doc:name="Set flowVars.payloadBackup as payload to use as input for getToken flow"/>
        <dw:transform-message doc:name="set flowVars.access_token for ObjectStore &amp; payload as json" metadata:id="c01feeb2-1846-411d-bc02-e982c6863194">
            <dw:input-payload doc:sample="resource_assertion.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	resource: flowVars.payloadBackup.resource,
	assertion: flowVars.payloadBackup.assertion
}]]></dw:set-payload>
            <dw:set-variable variableName="access_token"><![CDATA[%dw 1.0
%output application/java
---
payload.assertion]]></dw:set-variable>
        </dw:transform-message>
        <flow-ref name="token-exchange" doc:name="token-exchange"/>
        <flow-ref name="populateObjectStoreToHitRefreshTokenFlow" doc:name="populateObjectStoreToHitRefreshTokenFlow"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[flowVars.payloadBackup.assertion]" targetProperty="tokens" doc:name="retrieve-from-ObjectStore"/>
        <set-payload value="#[flowVars.payloadBackup]" doc:name="Reset Payload from FlowVars.payloadBackup"/>
		<flow-ref name="jwt-library-get-token" doc:name="jwt-library-get-token" />
		<logger level="INFO" doc:name="Log token" message="'Token result:' + #[payload]"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <munit:assert-not-null message="'Paylod is null but should contain an access token'" doc:name="Assert Not Null Payload"/>
        <munit:assert-true message="#[payload] " condition="#[payload.contains('Bearer')]" doc:name="Assert payload contains Bearer prefix string"/>
	</munit:test>
	
	<munit:test name="jwt-library-get-tokenTest-Token_not_in_ObjectStore"
		description="Test" >
		<mock:when messageProcessor=".*:.*" doc:name="Mock value in object store to force token-exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['contains-access-token']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['false']"/>
		</mock:when>
        <parse-template location="src/test/resources/initial_payload.json" doc:name="Parse Template"/>
		<dw:transform-message doc:name="Set FlowVars.payloadBackup as object to use for ObjectStore" metadata:id="2dc1d700-4fb6-435e-8dcc-44b644fcd70d">
            <dw:input-payload doc:sample="resource_assertion.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
		<flow-ref name="jwt-library-get-token" doc:name="jwt-library-get-token" />
		<logger level="INFO" doc:name="Log token" message="'Token result:' + #[payload]"/>
        <munit:assert-not-null message="'Paylod is null but should contain an access token'" doc:name="Assert Not Null Payload"/>
        <munit:assert-true message="#[payload] " condition="#[payload.startsWith('Bearer ')]" doc:name="Assert payload contains Bearer prefix string"/>
        <objectstore:remove config-ref="ObjectStore__Connector" key="#[flowVars.access_token]" ignoreNotExists="true" doc:name="Remove_to_clean_ObjectStore"/>
	</munit:test>
	
    <sub-flow name="populateObjectStoreToHitRefreshTokenFlow">
        <object-to-string-transformer doc:name="deserialise_from_AzureAD_http-Object to String"/>
        <logger message="#[payload]" level="INFO" doc:name="Log AzureAD response"/>
        <dw:transform-message doc:name="create json with access &amp; refresh token to store in ObjectStore" metadata:id="0f71e68a-df15-4fef-a3d7-9423451994a0">
            <dw:input-payload doc:sample="/Users/ettoreguiallaurito/JWT/src/main/resources/jwt-payload.json" mimeType="application/json"/>
            <dw:input-variable mimeType="application/json" variableName="payloadBackup"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	access_token: payload.access_token,	
	refresh_token: payload.refresh_token	
}
]]></dw:set-payload>
        </dw:transform-message>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <logger level="INFO" doc:name="Log payload to store in ObjectStore" message="'Object to store in ObjectStore to hit refresh-token flow' + #[payload]"/>
        <objectstore:store config-ref="ObjectStore__Connector" key="#[flowVars.payloadBackup.assertion]" value-ref="#[payload]" doc:name="store-tokens-to-for-token-refresh-flow-ObjectStore" overwrite="true"/>
    </sub-flow>
    
    <processor-chain xmlns="http://www.mulesoft.org/schema/mule/core" name="authFormatViolation2" doc:name="authFormatViolation2">
	   <logger message="Policy {{ policyId }} filtered the message #[message.getId()] based on authorization header format check violation" level="DEBUG" doc:name="Logger"/>	
	  <set-property propertyName="http.status" value="401" doc:name="Property"/>    
	  <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
	  <set-payload value='{ "error" : "Authorization header has invalid format"}' doc:name="Set Payload"/>
	</processor-chain>
</mule>
